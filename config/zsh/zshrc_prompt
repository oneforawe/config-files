#!/usr/bin/env bash
# filename: zshrc_prompt   (linked from ~/.zshrc_prompt)
# purpose: Define the interactive-shell prompts (primary and peripheral).


# This file is sourced from ~/.zshrc (which is for interactive shells).

# TODO: Enable notices for all vi edit modes.
# TODO: Have large, small (both with vi-mode indicator), and default prompts.
#       (for all three shells)
# TODO: Make ssh prompt but somehow make sure that tmux prompt isn't identical.
# TODO: Define a decent root prompt and environment (color schemes).

# Known issues:
# 1. In MacOs, in a shell terminal (eg, Terminal or iTerm2), using the "LARGE"
#    PROMPT_STYLE, when typing a long entry/command into the terminal, parts of
#    the entry may disappear, and when changing vi-edit-mode, the prompt moves
#    upward, erasing the line that was above it.
# 2. In MacOs, in a shell terminal (eg, Terminal or iTerm2), using the "LARGE"
#    PROMPT_STYLE, when using tab-completion of a command, funny stuff happens:
#    the cursor moves rightward and won't move back, and some text remains in
#    place behind this new left-most cursor-position.
# 3. In MacOs, in a shell terminal (eg, Terminal or iTerm2), using the "LARGE"
#    PROMPT_STYLE, when long auto-suggestions pop up, the can cause funny stuff
#    to happen too, similar to the above funny stuff in issue 2.

# Acknowledgement:
# This solution for a prompt that displays the vi mode is inspired by the
# solution given by Sebastian Blask in this Unix & Linux StackExchange thread:
# https://unix.stackexchange.com/questions/547/make-my-zsh-prompt-show-mode-in-vi-mode


# Custom window/tab title (prep)
# -----------------------------------------------------------------------------
DISABLE_AUTO_TITLE="true"
function set_the_window_tab_title () {
    # Getting rid of ".app" post-fix from "iTerm.app" (via substring removal):
    terminal_name="${TERM_PROGRAM%.*}"
    # Getting rid of "Apple_" pre-fix from "Apple_Terminal" (substring removal):
    terminal_name="${terminal_name#*_}"
    window_title="${terminal_name} - %m : ${PWD##*/}"
    print -Pn "\e]0;${window_title}\a"
}


# Custom shell prompt (prep)
# -----------------------------------------------------------------------------

# Applying colors, see `man zshmisc` for "Visual effects" (%F %f, %K %k, etc),
# for "EXPANSION OF PROMPT SEQUENCES" for `print -P`; also see `man zshbuiltins`
# To see all colors, execute:
# for n in {000..255}; do print -P "$n: %F{$n}%B(TESTING TEXT COLORS)%b%f"; done
# colors:
TIMESTAMP_COLOR="081" # muted light blue
STATUS_COLOR="002"    # bright green
PWD_COLOR="034"       # muted green
NORMAL_MODE_FG_COLOR="250" # muted white
NORMAL_MODE_BG_COLOR="088" # deep red
INSERT_MODE_FG_COLOR="252" # muted white
INSERT_MODE_BG_COLOR="022" # dark green
if [[ " `uname -n` " = *soliton* ]] ; then
    USER_HOST_COLOR="105" # muted light purple
elif [[ " `uname -n` " = *momentus* ]] ; then
    USER_HOST_COLOR="208" # muted orange
else
    USER_HOST_COLOR="226" # light yellow
fi
# vi-mode indicators:
NORMAL_LETTER="N"
INSERT_LETTER="I"
NORMAL_MODE="%F{$NORMAL_MODE_FG_COLOR}%K{$NORMAL_MODE_BG_COLOR}%B$NORMAL_LETTER%b%k%f"
INSERT_MODE="%F{$INSERT_MODE_FG_COLOR}%K{$INSERT_MODE_BG_COLOR}$INSERT_LETTER%k%f"
# initialize:
VI_MODE=$INSERT_MODE

# prompt display functions:
function newline ()           { print -P "%{\n%}" }
function show_timestamp ()    { print -P "%F{$TIMESTAMP_COLOR}[$TIMESTAMP]%f" }
function show_user_host_ip () { print -P "%F{$USER_HOST_COLOR}$USER @ $(uname -n) [$IP_ADDR]%f" }
function show_status ()       { print -P "%F{$STATUS_COLOR}\($STATUS\)%f" }
function show_path ()         { print -P "%F{$PWD_COLOR}${PWD}%f" }
#function show_env ()         { print -P "env:\(${CONDA_DEFAULT_ENV}\)" }
function show_env () {
    if [[ -v CONDA_DEFAULT_ENV ]] ; then
        print -P "env:\(${CONDA_DEFAULT_ENV}\) "
    else
        print -P ""
    fi
}

function show_prompt_pre_line_1 () { print -P "" }
function show_prompt_line_1 ()     { print -P "  \u250C $(show_timestamp) $(show_user_host_ip) $(show_status)" }
function show_prompt_line_2 ()     { print -P "  \u2502 $(show_path)" }
function show_prompt_line_final () { print -P "$VI_MODE \u2514 " }
function show_prompt_line_opt ()   { print -P "  \u2502 $(show_env)$(git_prompt_info)" }
#function show_prompt_line_opt ()   {
#    if [[ -n $(git_prompt_info) ]] ; then
#        print -P "  \u2502 $(show_env)$(git_prompt_info)"
#    else
#        print -P "  \u2502 $(show_env)"
#    fi
#}
#function show_prompt_line_opt ()   {
#    if [[ -v CONDA_DEFAULT_ENV ]] ; then
#        if [[ -n $(git_prompt_info) ]] ; then
#            print -P "  \u2502 $(show_env) $(git_prompt_info)"
#        else
#            print -P "  \u2502 $(show_env)"
#        fi
#    else
#        if [[ -n $(git_prompt_info) ]] ; then
#            print -P "  \u2502 $(git_prompt_info)"
#        fi
#    fi
#}

# Short prompt (from robbyrussell theme)
PROMPT_DEFAULT='${ret_status} %{$fg[cyan]%}%c%{$reset_color%} $(git_prompt_info)'
PROMPT_SMALL='${ret_status} $VI_MODE %F{cyan}%B%c%b%f $(show_env)$(git_prompt_info)'

# Set default / initialize
PROMPT_STYLE="LARGE"
#PROMPT_STYLE="SMALL"
#PROMPT_STYLE="DEFAULT"
PROMPT_SPACE="LOOSE"
#PROMPT_SPACE="TIGHT"



# Custom shell prompt (print)
# -----------------------------------------------------------------------------

# precmd: executed before the (primary) prompt (but not when prompt is redrawn).
function precmd () {
    # refresh prompt variables:
    STATUS=$status  # exit code / exit status of previously executed command
    if [[ $STATUS = 0 ]] ;
    then STATUS_COLOR="green" ;
    else STATUS_COLOR="red" ;
    fi
    #STATUS_COLOR="%(?."green"."red")"
    TIMESTAMP=$(date +'%Y %b %d %a %H:%M:%S')
    IP_ADDR=$(ifconfig | grep broadcast | awk '{print $2}')
    if [[ -z $IP_ADDR ]] ; then IP_ADDR="IP_MISSING" ; fi
    # print title:
    set_the_window_tab_title
    # print first part of prompt / peripheral pre-prompt:
    if [[ $PROMPT_SPACE = "LOOSE" ]] && [[ $PROMPT_STYLE != "DEFAULT" ]] ; then
        show_prompt_pre_line_1
    fi
    if [[ $PROMPT_STYLE = "LARGE" ]] ; then
        show_prompt_line_1
        show_prompt_line_2
        show_prompt_line_opt
    fi
}

function prepare-primary-prompt () {
    case $KEYMAP in
      (vicmd)      VI_MODE=$NORMAL_MODE ;;
      (main|viins) VI_MODE=$INSERT_MODE ;;
      (*)          VI_MODE=$INSERT_MODE ;;
    esac
    # print last (main) part of prompt / primary prompt:
    if [[ $PROMPT_STYLE = "LARGE" ]] ; then
        PROMPT=$'$(show_prompt_line_final)'
    elif [[ $PROMPT_STYLE = "SMALL" ]] ; then
        PROMPT=$PROMPT_SMALL
    elif [[ $PROMPT_STYLE = "DEFAULT" ]] ; then
        PROMPT=$PROMPT_DEFAULT
    fi
}

# draw / redraw (primary) prompt:
function zle-line-init zle-keymap-select {
    prepare-primary-prompt
    zle reset-prompt # reset/re-print primary prompt
}
zle -N zle-line-init
zle -N zle-keymap-select



# Just after the prompt.
# print the "post" part of the prompt / "peripheral post-prompt"
function preexec() {
    if [[ $PROMPT_SPACE = "LOOSE" ]] ; then
        print ""  # newline
    fi
}
# zsh executes preexec after it reads a command but before executing it.



# NOTES

# The zsh prompt default from .oh-my-zsh/themes/robbyrussell.zsh
# found with `grep -r 'PROMPT=' .oh-my-zsh | grep robby`
# PROMPT='${ret_status} %{$fg[cyan]%}%c%{$reset_color%} $(git_prompt_info)'

# See `man zshparam` for various prompt parameters, such as
# PROMPT, PROMPT2, PROMPT3, PROMPT4 (PS1, PS2, PS3, PS4)
# RPROMPT, RPROMPT2, SPROMPT, PROMPT_EOL_MARK, etc

# My AWS definition (good for ssh connections, but want to distinguish between
#                    tmux local and ssh)
#PROMPT='${ret_status}%{$reset_color%} %{$fg[yellow]%}%B[AWS - %n@%M]%b%{$reset_color%} %{$fg[cyan]%}%B%c%b%{$reset_color%} $(git_prompt_info)'

# Potentially work in concert with bash scripts:
# precmd() { eval "$PROMPT_COMMAND" }

